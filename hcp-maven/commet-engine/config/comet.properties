##
## HCP Destination information. 
##
## The following connection information in this context is only used to determine 
##   the HCP flavor that is running based on the HCP version of the system.  This must
##   match what is configured in the Metadata Extraction Generator properties files
##   otherwise COMET might get confused.
##

# [Required] HCP Data Access User to use for ingest.
destination.user=MyDataAccess

# [Required] HCP Data Access Password for destination.user account.
destination.password=letmein01

# Indication if the destination.password value is encoded in md5 format. [Default: "false"]
destination.passwordEncoded=false

# [Required] Root Path REST URL to HCP to place content. 
# Note:  This must be properly URL encoded.  That is any spaces or special characters,
#        must be encoded in UTF-8 form.
destination.rootPath=https://ns1.ten1.hcp700.clgdomain.local/rest

##
## Item Scanning Configuration
##

# [Required] List of items to pass to the scanner(s) indicating the starting point
#    for the scanning.  For using the file system scanner, it would be the folder path(s).
source.items=SampleData,SampleData2
#source.items=SampleData
#source.items=SimpleData


# [Optional] Comma separated list of item specifier(s) indicating when to start
#   processing items. The logic is that it will start with the source.item entry
#   and when the item specified here is encountered, it will start processing
#   items.  
#   For file system context, it will traverse the file system starting at the
#   start.items folder and traverse the file system until the folder represented
#   entry in this parameter has been found or passed.  Until that folder is found
#   items will not be processed by this tool.
#
#   NOTES: 
#     * This list can have less elements than the source.items list. In that
#       event any missing elements will be consider as if not specified.
#     * If there are more entries in this list than source.paths list, they
#       will be ignored.
#     * To specify no corresponding element in this list, an empty value can
#       be specified.  For example "SampleData/Subdir1,,SampleData/SubDir2".
#
#source.startTriggerItems=SampleData/SubDir1/SubDir1.1a,

##
## Scanner/Processor Module information
##

# [Required] The name of a class derived from BaseWorkItem class that will be constructed 
#    from the source.items and triggerStartItems.
#    
#    The objects constructed must be compatible with the class configured in scanner.class
#    and processor.class.   Otherwise, an exception will be thrown.
#
source.class=com.hds.hcp.tools.comet.FileSystemItem

# [Required] Java class to use for scanning the source content for processing.
scanner.class=com.hds.hcp.tools.comet.scanner.FileSystemScanner

# [Required] Java class to use for processing the content provided by the scanner
processor.class=com.hds.hcp.tools.comet.processor.ProcessorToHCP
#processor.class=com.hds.hcp.tools.comet.processor.ProcessorEchoFile

##
## Metadata Generation Module information
##

# [Required] Comma separated list of class(es) to load to extract metadata from files.
generator.classes=com.hds.hcp.tools.comet.generator.BasicFileInfoGenerator

##
## General Execution Parameters.
##

# Number of times to load up the batch with files to process.
#  This value is only read once at the beginning of execution.
# [Default: -1 (infinite)]
execution.loopCount=1

# Name of file on local system to watch for to indicate to stop processing
#  [Default: comet.stop]
#execution.stopRequestFile=ingestor.stop

# Name of file on local machine to watch for to indicate to pause processing.
#  For as long as file exists, the program will be paused. Delete the file to resume.
#  Changing this value while program is in the paused state will not cause the new
#  value to be used until resumed.
#  [Default: comet.pause]
#execution.pauseRequestFile=ingestor.pause

# Number of seconds to sleep during pause for between checks for resume.
# [Default: 5]
execution.pauseSleepInSeconds=1

# Number of seconds to sleep at end of batch run before attempting another batch.
# [Default: 60]
execution.loopSleepInSeconds=5

# Number of items to process before reporting on updated statistics count.
# [Default: 2000]
execution.statsReportingThreshold=10

# Indicate whether HTTP headers should be written to the console (stdout)
# [Default: false]
#execution.debugging.httpheaders=true

##
## Scanner Execution Settings
##

# Whether the scanner should try to call the delete function on the Work Item
#   when the work item has finished processing and completed with "Success".
#   It is ultimately up to the scanner implementation to decide whether and how
#   to perform the deletion.
# [Default: false]
#execution.scanner.deleteSourceItemsOnSuccess=true

# Whether the scanner should try to call the delete function on the Work Item
#   when the work item has finished processing and completed with "Not Attempted".
#   It is ultimately up to the scanner implementation to decide whether and how
#   to perform the deletion.
# [Default: false]
#execution.scanner.deleteSourceItemsOnNotAttempted=true

# Maximum number of seconds to wait for the Scanner to successfully submit the
#   item to the processor queue.  This value will allow for the Scanner Thread
#   to not block for a long time when the processor queue is full when it could
#   just as well process completion statuses.  Also makes sure that a deadlock
#   does not occur where the completion queue is full and blocking all the 
#   processors from completing and working on another item.
# [Default: 2 seconds]
#execution.scanner.maxSubmitWaitTime=3

# Number of milliseconds for the sleep duration for the process while waiting for the processor
#   threads to complete items.
# [Default: 2000 milliseconds (2 seconds)]
#execution.scanner.completionPollSleep=5000

# Number of successive work items the scanner is allowed to submit to the processor
#   before the scanner thread should check for any completion queue items to process.
# [Default: 50 ]
execution.scanner.checkCompleteQueueThreshold=10

# Maximum Number of complete item processing that should be performed by scanner
#   thread in between submitting items for the processor.  NOTE: once all items 
#   for a scanner have been submitted, all remaining processing items will be
#   processed when they complete.
# [Default: 100]
execution.scanner.completionProcessingThreshold=10

# Maximum number of threads to start as scanner threads.  Scanner threads are responsible for 
#   scanning the source.paths entries. Each item in source.paths will be fed to a single thread.
#   If there are less threads configured here than source.path entries, only the number of
#   required threads will be started.
# [Default: 5]
#execution.scanner.maxThreadCount=10

# For simulated load testing.  Will cause the scanner to sleep between each item thus
#   thus slowing down processing.
# [Default: 0]
#execution.scanner.loadTesting.threadSleep=2000

##
## Processor Execution Settings
##

# Number of threads to start as worker threads.  Worker threads are responsible for 
#   processing work items by generating metadata and writing content to HCP.
# [Default: 25]
execution.processor.threadCount=10

# Number of Work Items allowed to be queued for processing by the Processor Thread pool.
#   If the queue is full, the scanner threads will hang on waiting to add another item.
# [Default: 1000]
#execution.processor.taskQueueSize=10

# For simulated load testing.  Will cause the processor to sleep between each item thus
#   thus slowing down processing.
# [Default: 0]
#execution.processor.loadTesting.threadSleep=2000

